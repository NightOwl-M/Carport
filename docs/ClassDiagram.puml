@startuml
!pragma layout smetana

class Main {
  + main()
}

package "Entities" {
  class User {
    - int userId
    - String name
    - String email
    - String password
    - String role
  }

  class Order {
    - int orderId
    - String name
    - String email
    - String address
    - String phone
    - String userText
    - String salesmanText
    - int carportWidth
    - int carportLength
    - String roof
    - double salesPrice
    - String status
    - Timestamp createdAt
  }

  class Material {
    - int materialId
    - String description
    - String unit
    - double price
  }

  class MaterialVariant {
    - int materialVariantId
    - int materialId
    - int length
    - int quantity
    - String useDescription
  }

  class BillOfMaterials {
    - int bomId
    - int orderId
    - int materialVariantId
  }

  class Suggestion {
    - int sugId
    - int orderId
    - String sugData
    - Timestamp createdAt
  }
}

package "Mapper" {
  class UserMapper {

  }

  class OrderMapper {

  }

  class MaterialMapper {

  }

  class MaterialVariantMapper {

  }

  class BillOfMaterialsMapper {

  }
}

package "Service" {
  class OrderService {

  }

  class EmailService {
  }

  class MaterialService {
  }

  class UserService {
  }
}

package "Controllers" {
  class CustomerController {

  }

  class AdminController {

  }

  class LoginController {

  }
}

package "Config" {
  class SessionConfig {

  }

  class ThymeleafConfig {

  }

  class ConnectionPool {
    - static instance
    - static ds
    + getInstance()
    + getConnection()
  }
}

package "Exceptions" {
  class DatabaseException {
    + DatabaseException()
  }
}

' Relationer
Order *-- User : "Must have"
Order o-- Suggestion : "Can have"
Order *-- BillOfMaterials : "har materialer"
BillOfMaterials *-- MaterialVariant
MaterialVariant *-- Material

Main -- "Controllers"
Main -- "Config"
"Controllers" --> "Service"
"Service" --> "Mapper"
"Mapper" --> "Entities"
"Mapper" --> "Exceptions"

@enduml

implements ..|>
extends <|-- (is-a)
composition *-- (must-have)
Aggregation o-- (can-have)
Associering <--
